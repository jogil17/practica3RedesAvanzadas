name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-format:
    name: Lint and Format Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8

      - name: Run Formatter (Black)
        run: black --check app/

      - name: Run Linter (Flake8)
        run: flake8 app/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run Tests
        run: pytest tests/unittest_app.py --disable-warnings

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t my_app:latest .

      - name: Tag Docker Image
        run: |
          docker tag my_app:latest ${{ secrets.DOCKER_USERNAME }}/my_app:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my_app:latest

  deploy:
    name: Simulated Deployment
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Canary Deployment Simulation
        run: |
          echo "Starting Canary Deployment Simulation..."
          echo "1. Deploying new version to 1 of 3 instances..."
          echo "2. Running tests on the canary instance..."
          echo "Tests passed! Deploying to the remaining instances."
          echo "Canary Deployment Successful!"

      - name: Blue-Green Deployment Simulation
        run: |
          echo "Starting Blue-Green Deployment Simulation..."
          echo "1. Deploying new version to a duplicate environment (Green)..."
          echo "2. Running tests on the Green environment..."
          echo "Tests passed! Switching traffic to the Green environment..."
          echo "3. Shutting down the old (Blue) environment."
          echo "Blue-Green Deployment Successful!"

      - name: Local Deployment Instructions
        run: |
          echo "To deploy the application locally, run the following commands:"
          echo ""
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/my_app:latest"
          echo "docker run -d -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/my_app:latest"
